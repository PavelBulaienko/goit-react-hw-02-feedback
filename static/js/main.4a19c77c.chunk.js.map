{"version":3,"sources":["components/FeedbackOptions.js","components/Statistics.js","components/ExtraStats.js","components/Section.js","components/Notification.js","components/App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","Object","keys","map","option","name","className","type","onClick","shortid","generate","Statistics","good","neutral","bad","propTypes","countTotalFeedback","func","ExtraStats","countPositiveFeedbackPercentage","total","procent","Section","title","Notification","message","App","state","e","setState","prevState","target","Math","floor","isFeedbackClear","localStorage","setItem","JSON","stringify","this","parse","getItem","Component","ReactDOM","render","document","getElementById"],"mappings":"mSAyBeA,EArBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACpB,mCACKC,OAAOC,KAAKH,GAASI,KAAI,SAACC,GAAD,OACtB,wBAEIC,KAAMD,EACNE,UAAU,eACVC,KAAK,SACLC,QAASR,EALb,SAOKI,GANIK,IAAQC,kBCQdC,EAdI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAlB,OACf,gCACI,uCAAUF,KACV,0CAAaC,KACb,sCAASC,S,gBCMjBC,IAAUA,UAAY,CAClBC,mBAAoBD,IAAUE,MAGnBC,MAdI,SAAC,GAAD,IACfF,EADe,EACfA,mBACAG,EAFe,EAEfA,gCAFe,OAIf,qCACI,wCAAWH,IAAqBI,SAChC,2CAAcD,IAAkCE,eCAzCC,EANC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAAe,6BAAKA,KCMrBC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KCsE3BC,E,4MA/DXC,MAAQ,CAAEf,KAAM,EAAGC,QAAS,EAAGC,IAAK,G,EAEpCd,gBAAkB,SAAC4B,GACf,EAAKC,UAAS,SAACC,GAAD,sBACTF,EAAEG,OAAO1B,KAAOyB,EAAUF,EAAEG,OAAO1B,MAAQ,O,EAGpDW,mBAAqB,WACjB,MAAO,CACHI,MAAO,EAAKO,MAAMf,KAAO,EAAKe,MAAMd,QAAU,EAAKc,MAAMb,M,EAGjEK,gCAAkC,WAC9B,MAA+B,EAAKQ,MAA5Bf,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACvB,MAAO,CACHO,QAASW,KAAKC,MAAc,IAAPrB,GAAeA,EAAOC,EAAUC,IAAQ,M,EAGrEoB,gBAAkB,WACd,MAA+B,EAAKP,MACpC,OADA,EAAQf,KAAR,EAAcC,QAAd,EAAuBC,MACS,G,wDAGpC,WAEIqB,aAAaC,QAAQ,UAAWC,KAAKC,UAAUC,KAAKZ,U,+BAExD,WAEIY,KAAKV,SAASQ,KAAKG,MAAML,aAAaM,QAAQ,e,oBAGlD,WACI,OACI,qCACI,cAAC,EAAD,CAASlB,MAAM,0BACf,cAAC,EAAD,CACIxB,QAASwC,KAAKZ,MACd3B,gBAAiBuC,KAAKvC,kBAEzBuC,KAAKL,kBACF,cAAC,EAAD,CAAcT,QAAQ,sBAEtB,qCACI,cAAC,EAAD,CAASF,MAAM,eACf,cAAC,EAAD,CACIX,KAAM2B,KAAKZ,MAAMf,KACjBC,QAAS0B,KAAKZ,MAAMd,QACpBC,IAAKyB,KAAKZ,MAAMb,MAEpB,cAAC,EAAD,CACIE,mBAAoBuB,KAAKvB,mBACzBG,gCACIoB,KAAKpB,4C,GAtDnBuB,aCJlBC,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.4a19c77c.chunk.js","sourcesContent":["import '../style/Button.css'\r\nimport shortid from 'shortid'\r\nimport propTypes from 'prop-types'\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n    <>\r\n        {Object.keys(options).map((option) => (\r\n            <button\r\n                key={shortid.generate()}\r\n                name={option}\r\n                className=\"buttonReview\"\r\n                type=\"button\"\r\n                onClick={onLeaveFeedback}\r\n            >\r\n                {option}\r\n            </button>\r\n        ))}\r\n    </>\r\n)\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: propTypes.object,\r\n    onLeaveFeedback: propTypes.func,\r\n}\r\n\r\nexport default FeedbackOptions\r\n","import propTypes from 'prop-types'\r\n\r\nconst Statistics = ({ good, neutral, bad }) => (\r\n    <div>\r\n        <p>Good: {good}</p>\r\n        <p>Neutral: {neutral}</p>\r\n        <p>Bad: {bad}</p>\r\n    </div>\r\n)\r\n\r\nStatistics.propTypes = {\r\n    good: propTypes.number,\r\n    neutral: propTypes.number,\r\n    bad: propTypes.number,\r\n}\r\n\r\nexport default Statistics\r\n","import propTypes from 'prop-types'\r\n\r\nconst ExtraStats = ({\r\n    countTotalFeedback,\r\n    countPositiveFeedbackPercentage,\r\n}) => (\r\n    <>\r\n        <p>Total: {countTotalFeedback().total}</p>\r\n        <p>Positive: {countPositiveFeedbackPercentage().procent}</p>\r\n    </>\r\n)\r\n\r\npropTypes.propTypes = {\r\n    countTotalFeedback: propTypes.func,\r\n}\r\n\r\nexport default ExtraStats\r\n","import propTypes from 'prop-types'\r\n\r\nconst Section = ({ title }) => <h2>{title}</h2>\r\n\r\nSection.propTypes = {\r\n    title: propTypes.string,\r\n}\r\n\r\nexport default Section\r\n","import propTypes from 'prop-types'\r\n\r\nconst Notification = ({ message }) => <p>{message}</p>\r\n\r\nNotification.propTypes = {\r\n    message: propTypes.string,\r\n}\r\n\r\nexport default Notification\r\n","import '../style/App.css'\nimport { Component } from 'react'\nimport FeedbackOptions from './FeedbackOptions'\nimport Statistics from './Statistics'\nimport ExtraStats from './ExtraStats'\nimport Section from './Section'\nimport Notification from './Notification'\n\nclass App extends Component {\n    state = { good: 0, neutral: 0, bad: 0 }\n\n    onLeaveFeedback = (e) => {\n        this.setState((prevState) => ({\n            [e.target.name]: prevState[e.target.name] + 1,\n        }))\n    }\n    countTotalFeedback = () => {\n        return {\n            total: this.state.good + this.state.neutral + this.state.bad,\n        }\n    }\n    countPositiveFeedbackPercentage = () => {\n        const { good, neutral, bad } = this.state\n        return {\n            procent: Math.floor((good * 100) / (good + neutral + bad)) + '%',\n        }\n    }\n    isFeedbackClear = () => {\n        const { good, neutral, bad } = this.state\n        return good + neutral + bad === 0 ? true : false\n    }\n\n    componentDidUpdate() {\n        // если не нужно записывать данные в localStorage закоментируйте эту функцию\n        localStorage.setItem('options', JSON.stringify(this.state))\n    }\n    componentDidMount() {\n        // если не нужно записывать данные в localStorage закоментируйте эту функцию\n        this.setState(JSON.parse(localStorage.getItem('options')))\n    }\n\n    render() {\n        return (\n            <>\n                <Section title=\"Please leave feedback\" />\n                <FeedbackOptions\n                    options={this.state}\n                    onLeaveFeedback={this.onLeaveFeedback}\n                />\n                {this.isFeedbackClear() ? (\n                    <Notification message=\"No feedback given\" />\n                ) : (\n                    <>\n                        <Section title=\"Statistics\" />\n                        <Statistics\n                            good={this.state.good}\n                            neutral={this.state.neutral}\n                            bad={this.state.bad}\n                        />\n                        <ExtraStats\n                            countTotalFeedback={this.countTotalFeedback}\n                            countPositiveFeedbackPercentage={\n                                this.countPositiveFeedbackPercentage\n                            }\n                        />\n                    </>\n                )}\n            </>\n        )\n    }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App'\n\nReactDOM.render(<App />,  document.getElementById('root'))\n"],"sourceRoot":""}